// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gym_be.Models;

#nullable disable

namespace gym_be.Migrations
{
    [DbContext(typeof(GymContext))]
    partial class GymContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gym_be.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("appointmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("appointmentid");

                    b.Property<Guid?>("ScheduleID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("appointmentdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appointmentdate");

                    b.Property<string>("appointmentname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("appointmentname");

                    b.Property<TimeSpan>("appointmenttime")
                        .HasColumnType("interval")
                        .HasColumnName("appointmenttime");

                    b.Property<Guid>("customerid")
                        .HasColumnType("uuid")
                        .HasColumnName("customerid");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("serviceid")
                        .HasColumnType("uuid")
                        .HasColumnName("serviceid");

                    b.Property<Guid>("statusid")
                        .HasColumnType("uuid")
                        .HasColumnName("statusid");

                    b.HasKey("appointmentid");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("customerid");

                    b.HasIndex("serviceid");

                    b.ToTable("appointment", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("customerid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<float?>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<float?>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("CustomerID");

                    b.ToTable("customer", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("paymentid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customerid");

                    b.Property<bool?>("Method")
                        .HasColumnType("boolean")
                        .HasColumnName("method");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paidat");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("PaymentId");

                    b.ToTable("payment", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.PaymentDetail", b =>
                {
                    b.Property<Guid>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("payment_detail_id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("courseid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customerid");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("paymentid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("PaymentDetailId");

                    b.ToTable("payment_detail", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("scheduleid");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dayofweek");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endtime");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer")
                        .HasColumnName("maxparticipants");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.HasKey("ScheduleID");

                    b.ToTable("schedule", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Status", b =>
                {
                    b.Property<Guid>("statusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("statusid");

                    b.Property<string>("statusname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusname");

                    b.HasKey("statusid");

                    b.ToTable("status", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.WorkoutCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("courseid");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("coursename");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationWeek")
                        .HasColumnType("integer")
                        .HasColumnName("durationweek");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<Guid>("PersonalTrainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("personaltrainer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<List<Guid>>("Schedules")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("schedules");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("serviceid");

                    b.HasKey("CourseId");

                    b.HasIndex("PersonalTrainerId");

                    b.ToTable("workoutcourse", "public");
                });

            modelBuilder.Entity("gym_be.Models.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("serviceid");

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("coursedescription");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("servicename");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("serviceprice");

                    b.HasKey("ServiceID");

                    b.ToTable("service", "public");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Appointment", b =>
                {
                    b.HasOne("gym_be.Models.Entities.Schedule", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleID");

                    b.HasOne("gym_be.Models.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gym_be.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("serviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("gym_be.Models.Entities.WorkoutCourse", b =>
                {
                    b.HasOne("gym_be.Models.Entities.Customer", "PersonalTrainer")
                        .WithMany()
                        .HasForeignKey("PersonalTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalTrainer");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("gym_be.Models.Entities.Schedule", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("gym_be.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
